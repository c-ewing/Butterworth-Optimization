--------------------------------------------------------------------------------
Profile data file 'optimization/macro/butterworth_O0.out' (creator: callgrind-3.21.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 3822664
Trigger: Program termination
Profiled target:  ./optimization/macro/butterworth_O0 ts_sine.dat optimization/macro/removeme_O0.dat (PID 1660, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
20,876,408 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                  file:function
--------------------------------------------------------------------------------
6,055,528 (29.01%)  ???:_IO_vfscanf [/usr/lib/libc-2.28.so]
4,147,052 (19.86%)  ???:vfprintf [/usr/lib/libc-2.28.so]
2,068,000 ( 9.91%)  ???:____strtoul_l_internal [/usr/lib/libc-2.28.so]
1,397,000 ( 6.69%)  optimization/macro/butterworth.c:butterworthFilterApply [/root/Butterworth-Optimization/optimization/macro/butterworth_O0]
  888,938 ( 4.26%)  ???:getc'2 [/usr/lib/libc-2.28.so]
  814,054 ( 3.90%)  ???:__isoc99_fscanf [/usr/lib/libc-2.28.so]
  795,003 ( 3.81%)  optimization/macro/butterworth.c:_IO_default_uflow
  715,563 ( 3.43%)  ???:_IO_file_xsputn@@GLIBC_2.4 [/usr/lib/libc-2.28.so]
  671,000 ( 3.21%)  ???:_itoa_word [/usr/lib/libc-2.28.so]
  671,000 ( 3.21%)  ???:strchrnul [/usr/lib/libc-2.28.so]
  484,033 ( 2.32%)  optimization/macro/butterworth.c:main'2 [/root/Butterworth-Optimization/optimization/macro/butterworth_O0]
  417,924 ( 2.00%)  optimization/macro/butterworth.c:fixedpoint_to_uint16'2 [/root/Butterworth-Optimization/optimization/macro/butterworth_O0]
  395,982 ( 1.90%)  ???:_IO_sputbackc [/usr/lib/libc-2.28.so]
  329,954 ( 1.58%)  ???:__memcpy_neon [/usr/lib/libc-2.28.so]
  297,036 ( 1.42%)  optimization/macro/butterworth.c:fseek
  242,000 ( 1.16%)  ???:fprintf [/usr/lib/libc-2.28.so]
  110,000 ( 0.53%)  ???:__strtoul_internal [/usr/lib/libc-2.28.so]
  110,000 ( 0.53%)  ???:mempcpy [/usr/lib/ld-2.28.so]
   65,988 ( 0.32%)  ???:0x0485b064 [???]

--------------------------------------------------------------------------------
-- Auto-annotated source: optimization/macro/butterworth.c
--------------------------------------------------------------------------------
Ir                 

-- line 30 ----------------------------------------
        .               fixedpoint_t x1, x2;
        .           
        .               // Previous output
        .               fixedpoint_t y1, y2;
        .           } ButterworthFilter;
        .           
        .           // Function to initialize Butterworth filter
        .           void butterworthFilterInit(ButterworthFilter *filter)
        4 ( 0.00%)  {
        .               // TODO: Switch to a lookup table rather than a calculated value for the specific case
        .               // double lambda = 1.0 / tan(M_PI * CUTOFF_FREQUENCY / SAMPLING_RATE);
        3 ( 0.00%)      fixedpoint_t lambda = fixedpoint_from_real(3.40568723888925); // TODO: Hardcoded the value for now
        .           
        .           #ifdef DEBUG
        .               printf("lambda:\t%s\n", fixedpoint_str(lambda));
        .           #endif
        .           
        .               // Calculate the coefficients
        .               // All of these are adjusted so that a0 is normalized to 1.0, a0 is calculated first and then used to scale all the other coefficients.
        .               // These coefficients are usually divided by a0 but thats slow so instead 1/a0 is calculated and multiplied.
        .               // double inv_a0 = 1.0 / (pow(lambda, 2) + sqrt(2.0) * lambda + 1.0);
       19 ( 0.00%)      fixedpoint_t lambda_squared = fixedpoint_mul(lambda, lambda);
       19 ( 0.00%)      fixedpoint_t sqrt2_lambda = fixedpoint_mul(FIXEDPOINT_SQRT2, lambda);
        5 ( 0.00%)      fixedpoint_t a0 = lambda_squared + sqrt2_lambda + FIXEDPOINT_ONE;
       10 ( 0.00%)      fixedpoint_t inv_a0 = fixedpoint_div(FIXEDPOINT_ONE, a0);
      172 ( 0.00%)  => ???:0x000110a8 (1x)
        .           
        .           #ifdef DEBUG
        .               printf("inv_a0:\t%s\n", fixedpoint_str(inv_a0));
        .           #endif
        .           
        .               // Calculate the coefficients:
        3 ( 0.00%)      filter->a0 = FIXEDPOINT_ONE; // Due to the normalizing around a0, this is always 1.0
        .               // a1 = (-2.0 * pow(lambda, 2) + 2.0) * inv_a0;
       42 ( 0.00%)      filter->a1 = fixedpoint_mul((fixedpoint_mul(fixedpoint_from_int(-2), lambda_squared) + FIXEDPOINT_TWO), inv_a0);
        .               // a2 = (pow(lambda, 2) - sqrt(2.0) * lambda + 1.0) * inv_a0;
       23 ( 0.00%)      filter->a2 = fixedpoint_mul((lambda_squared - sqrt2_lambda + FIXEDPOINT_ONE), inv_a0);
        .           
        .               // These are fixed for a second order Butterworth filter using the bilinear transform and adjusted using the value of a0.
        3 ( 0.00%)      filter->b0 = inv_a0;
        .               // b1 = 2.0 * inv_a0
       16 ( 0.00%)      filter->b1 = fixedpoint_mul(FIXEDPOINT_TWO, inv_a0);
        3 ( 0.00%)      filter->b2 = inv_a0;
        .           
        .           // Print the coefficients
        .           #ifdef DEBUG
        .               printf("b0:\t%s\n", fixedpoint_str(filter->b0));
        .               printf("b1:\t%s\n", fixedpoint_str(filter->b1));
        .               printf("b2:\t%s\n", fixedpoint_str(filter->b2));
        .           
        .               printf("a0:\t%s\n", fixedpoint_str(filter->a0));
        .               printf("a1:\t%s\n", fixedpoint_str(filter->a1));
        .               printf("a2:\t%s\n", fixedpoint_str(filter->a2));
        .           #endif
        .           
        .               // Initialize the previous input and output values to zero
        3 ( 0.00%)      filter->x1 = FIXEDPOINT_ZERO;
        3 ( 0.00%)      filter->x2 = FIXEDPOINT_ZERO;
        3 ( 0.00%)      filter->y1 = FIXEDPOINT_ZERO;
        3 ( 0.00%)      filter->y2 = FIXEDPOINT_ZERO;
        3 ( 0.00%)  }
9,259,807 (44.36%)  => optimization/macro/butterworth.c:main'2 (1x)
        .           
        .           // Function to apply Butterworth filter to a single input
        .           fixedpoint_t butterworthFilterApply(ButterworthFilter *f, fixedpoint_t input)
   55,000 ( 0.26%)  {
        .               // Calculate the output
        .               // output = (f->b0 * input + f->b1 * f->x1 + f->b2 * f->x2) - (f->a1 * f->y1 + f->a2 * f->y2);
1,144,000 ( 5.48%)      fixedpoint_t output = (fixedpoint_mul(f->b0, input) + fixedpoint_mul(f->b1, f->x1) + fixedpoint_mul(f->b2, f->x2)) - (fixedpoint_mul(f->a1, f->y1) + fixedpoint_mul(f->a2, f->y2));
        .           
        .               // Update the previous input and output values
   44,000 ( 0.21%)      f->x2 = f->x1;
   33,000 ( 0.16%)      f->x1 = input;
        .           
   44,000 ( 0.21%)      f->y2 = f->y1;
   33,000 ( 0.16%)      f->y1 = output;
        .           
   11,000 ( 0.05%)      return output;
   33,000 ( 0.16%)  }
        .           
        .           uint16_t fixedpoint_to_uint16(fixedpoint_t input)
   44,000 ( 0.21%)  {
        .               // Adjust the range from [0,65535] of the input to [-32727, 32727] of the output
  253,000 ( 1.21%)      fixedpoint_t adjusted = fixedpoint_div(input, FIXEDPOINT_TWO);
   44,000 ( 0.21%)      fixedpoint_t scaled = adjusted + fixedpoint_from_int(32767);
        .           
        .           #ifdef DEBUG
        .               printf("fp val:\t%s\n", fixedpoint_str(input));
        .               printf("adj:\t%s\n", fixedpoint_str(adjusted));
        .               printf("uint16:\t%s\n", fixedpoint_str(scaled));
        .           #endif
   33,000 ( 0.16%)      return fixedpoint_to_int(scaled);
   44,000 ( 0.21%)  }
7,629,522 (36.55%)  => optimization/macro/butterworth.c:main'2 (1x)
        .           
        .           int main(int argc, char *argv[])
        5 ( 0.00%)  {
       27 ( 0.00%)      printf("Applying Butterworth Filter\n");
20,696,391 (99.14%)  => ???:fopen@@GLIBC_2.4 (1x)
   60,208 ( 0.29%)  => ???:puts (1x)
    2,029 ( 0.01%)  => ???:_dl_runtime_resolve (2x)
        .               if (argc < 3)
        .               {
        .                   printf("Usage: %s <input_file> <output_file>\n", argv[0]);
        .                   return 1;
        .               }
        .           
        1 ( 0.00%)      FILE *inputFile = fopen(argv[1], "r");
       11 ( 0.00%)      FILE *outputFile = fopen(argv[2], "w");
20,695,730 (99.13%)  => ???:fopen@@GLIBC_2.4'2 (1x)
        .           
        6 ( 0.00%)      if (inputFile == NULL || outputFile == NULL)
        .               {
        .                   printf("Failed to open input or output file\n");
        .                   return 1;
        .               }
        .           
        .               // Count the number of lines in the input file
        .               // TODO: Optimization: dont scan the file, instead apply as reading the file
        2 ( 0.00%)      size_t numSamples = 0;
        .               int c;
  795,010 ( 3.81%)      while ((c = fgetc(inputFile)) != EOF)
19,006,212 (91.04%)  => ???:fseek (1x)
  891,367 ( 4.27%)  => ???:getc'2 (63,499x)
    1,026 ( 0.00%)  => ???:_dl_runtime_resolve (1x)
        .               {
        3 ( 0.00%)          if (c == '\n')
        .                   {
        .                       numSamples++;
        .                   }
        .               }
        .               numSamples++; // Add one for the last line
        .               // Reset the file pointer to the beginning of the file
        .               fseek(inputFile, 0, SEEK_SET);
        .           
        .               // Allocate memory for input and output buffers
  297,036 ( 1.42%)      fixedpoint_t *inputBuffer = (fixedpoint_t *)malloc(numSamples * sizeof(fixedpoint_t));
9,446,193 (45.25%)  => ???:__isoc99_fscanf (11,000x)
9,260,144 (44.36%)  => optimization/macro/butterworth.c:butterworthFilterInit (1x)
    2,109 ( 0.01%)  => ???:_dl_runtime_resolve (2x)
      454 ( 0.00%)  => ???:malloc (2x)
        .               fixedpoint_t *outputBuffer = (fixedpoint_t *)malloc(numSamples * sizeof(fixedpoint_t));
        .           
        .               // Read input samples from file
        .               uint16_t sample;
        .               for (size_t i = 0; i < numSamples; i++)
        .               {
        .                   if (fscanf(inputFile, "%hu", &sample) != 1)
        .                   {
-- line 164 ----------------------------------------
-- line 171 ----------------------------------------
        .                   }
        .               }
        .           
        .               // Initialize the filter
        .               ButterworthFilter ButterworthFilter;
        .               butterworthFilterInit(&ButterworthFilter);
        .           
        .               // Apply Butterworth filter
   77,007 ( 0.37%)      for (size_t i = 0; i < numSamples; i++)
        .               {
  154,000 ( 0.74%)          outputBuffer[i] = butterworthFilterApply(&ButterworthFilter, inputBuffer[i]);
1,397,000 ( 6.69%)  => optimization/macro/butterworth.c:butterworthFilterApply (11,000x)
        .           #ifdef DEBUG
        .                   printf("Input:\t%s\n", fixedpoint_str(inputBuffer[i]));
        .                   printf("Output:\t%s\n", fixedpoint_str(outputBuffer[i]));
        .           #endif
        .               }
        .           
        .               // Write output samples to file
        7 ( 0.00%)      for (size_t i = 0; i < numSamples; ++i)
        .               {
  253,019 ( 1.21%)          fprintf(outputFile, "%hu\n", fixedpoint_to_uint16(outputBuffer[i]));
41,977,805,606 (201077.7%)  => optimization/macro/butterworth.c:fixedpoint_to_uint16'2 (10,998x)
7,629,598 (36.55%)  => optimization/macro/butterworth.c:fixedpoint_to_uint16 (2x)
6,955,721 (33.32%)  => ???:fprintf (11,000x)
    2,699 ( 0.01%)  => ???:fclose@@GLIBC_2.4 (1x)
    2,150 ( 0.01%)  => ???:_dl_runtime_resolve (2x)
      204 ( 0.00%)  => ???:puts (1x)
        .               }
        .           
        .               printf("Finished Applying Butterworth Filter\n");
        .           
        .               // Cleanup
        .               fclose(inputFile);
        5 ( 0.00%)      fclose(outputFile);
    2,075 ( 0.01%)  => ???:fclose@@GLIBC_2.4'2 (1x)
       18 ( 0.00%)      free(inputBuffer);
    1,054 ( 0.01%)  => ???:_dl_runtime_resolve (1x)
      335 ( 0.00%)  => ???:free (2x)
        .               free(outputBuffer);
        .           
        .               return 0;
        .           }
        1 ( 0.00%)  <counts for unidentified lines in optimization/macro/butterworth.c>

--------------------------------------------------------------------------------
Ir                 
--------------------------------------------------------------------------------
3,391,322 (16.24%)  events annotated

